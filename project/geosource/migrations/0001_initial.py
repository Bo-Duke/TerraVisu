# Generated by Django 4.1.3 on 2022-11-24 10:11

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import project.geosource.fields
import project.geosource.mixins
import project.geosource.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Source",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("credit", models.TextField(blank=True)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True)),
                ("id_field", models.CharField(default="id", max_length=255)),
                (
                    "geom_type",
                    models.IntegerField(
                        choices=[
                            (0, project.geosource.models.GeometryTypes["Point"]),
                            (1, project.geosource.models.GeometryTypes["LineString"]),
                            (3, project.geosource.models.GeometryTypes["Polygon"]),
                            (4, project.geosource.models.GeometryTypes["MultiPoint"]),
                            (
                                5,
                                project.geosource.models.GeometryTypes[
                                    "MultiLineString"
                                ],
                            ),
                            (6, project.geosource.models.GeometryTypes["MultiPolygon"]),
                            (
                                7,
                                project.geosource.models.GeometryTypes[
                                    "GeometryCollection"
                                ],
                            ),
                            (None, "Undefined"),
                        ]
                    ),
                ),
                ("settings", models.JSONField(default=dict)),
                ("report", models.JSONField(default=dict)),
                ("task_id", models.CharField(max_length=255, null=True)),
                ("task_date", models.DateTimeField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "last_refresh",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "polymorphic_ctype",
                    models.ForeignKey(
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="polymorphic_%(app_label)s.%(class)s_set+",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "permissions": (("can_manage_sources", "Can manage sources"),),
            },
            bases=(models.Model, project.geosource.mixins.CeleryCallMethodsMixin),
        ),
        migrations.CreateModel(
            name="CommandSource",
            fields=[
                (
                    "source_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="geosource.source",
                    ),
                ),
                ("command", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("geosource.source",),
        ),
        migrations.CreateModel(
            name="CSVSource",
            fields=[
                (
                    "source_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="geosource.source",
                    ),
                ),
                ("file", models.FileField(upload_to="geosource/csv/%Y")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("geosource.source",),
        ),
        migrations.CreateModel(
            name="GeoJSONSource",
            fields=[
                (
                    "source_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="geosource.source",
                    ),
                ),
                ("file", models.FileField(upload_to="geosource/geojson/%Y/")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("geosource.source",),
        ),
        migrations.CreateModel(
            name="PostGISSource",
            fields=[
                (
                    "source_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="geosource.source",
                    ),
                ),
                ("db_host", models.CharField(max_length=255)),
                ("db_port", models.IntegerField(default=5432)),
                ("db_username", models.CharField(max_length=63)),
                ("db_password", models.CharField(max_length=255)),
                ("db_name", models.CharField(max_length=63)),
                ("query", models.TextField()),
                ("geom_field", models.CharField(max_length=255)),
                ("refresh", models.IntegerField(default=-1)),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("geosource.source",),
        ),
        migrations.CreateModel(
            name="ShapefileSource",
            fields=[
                (
                    "source_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="geosource.source",
                    ),
                ),
                ("file", models.FileField(upload_to="geosource/shapefile/%Y/")),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("geosource.source",),
        ),
        migrations.CreateModel(
            name="WMTSSource",
            fields=[
                (
                    "source_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="geosource.source",
                    ),
                ),
                ("minzoom", models.IntegerField(null=True)),
                ("maxzoom", models.IntegerField(null=True)),
                ("tile_size", models.IntegerField()),
                ("url", project.geosource.fields.LongURLField()),
            ],
            options={
                "abstract": False,
                "base_manager_name": "objects",
            },
            bases=("geosource.source",),
        ),
        migrations.CreateModel(
            name="Field",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("label", models.CharField(max_length=255)),
                (
                    "data_type",
                    models.IntegerField(
                        choices=[
                            (1, project.geosource.models.FieldTypes["String"]),
                            (2, project.geosource.models.FieldTypes["Integer"]),
                            (3, project.geosource.models.FieldTypes["Float"]),
                            (4, project.geosource.models.FieldTypes["Boolean"]),
                            (5, project.geosource.models.FieldTypes["Undefined"]),
                            (6, project.geosource.models.FieldTypes["Date"]),
                        ],
                        default=5,
                    ),
                ),
                ("level", models.IntegerField(default=0)),
                ("sample", models.JSONField(default=list)),
                ("order", models.IntegerField(default=0)),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fields",
                        to="geosource.source",
                    ),
                ),
            ],
            options={
                "ordering": ("order",),
                "unique_together": {("source", "name")},
            },
        ),
    ]
